program = (whitespace? statement <';'> whitespace?)*

statement = bind | expression;
bind = identifier whitespace? <'='> whitespace? expression;

expression = number | string | vector | identifier | lambda | (<'('> expression <')'>)

(* data structures *)
vector = <'['> (expression|whitespace)* <']'>
lambda = <'lambda'> whitespace? <'['> arguments <']'> whitespace? <'{'> (whitespace? statement <';'> whitespace?)* <'}'>

(* helpers *)
arguments = (whitespace? argument whitespace?)*
argument = type <'/'> identifier

(* raw atomic things *)
type = #'[A-Z][A-Za-z]*'
identifier = #'[A-Za-z_]+'
number = #'[0-9.]+'
string = <'\''> #'[^\']*' <'\''>

(* utilities *)
<whitespace> = <#'\s+'>
